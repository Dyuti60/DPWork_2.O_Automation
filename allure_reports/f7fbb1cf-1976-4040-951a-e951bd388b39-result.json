{"name": "test_DpWorkAddToDPNF", "status": "broken", "statusDetails": {"message": "exception.CustomException: Error occured in python script name [F:\\DP_WORK_2.O\\DPWork_2.O\\DPWork_2.O_AutomationTesting\\testcases\\test_dpwork_addToDpnf.py] line number [135] error message[Error occured in python script name [F:\\DP_WORK_2.O\\DPWork_2.O\\DPWork_2.O_AutomationTesting\\pageObjects\\add_to_DPNF_2_O.py] line number [304] error message[Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[contains(text(),\"Yes, Continue\")]\"}\n  (Session info: MicrosoftEdge=126.0.2592.113); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF66B688132+13538]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B611DE9+595465]\n\t(No symbol) [0x00007FF66B42E6CF]\n\t(No symbol) [0x00007FF66B472960]\n\t(No symbol) [0x00007FF66B472A1F]\n\t(No symbol) [0x00007FF66B4AD627]\n\t(No symbol) [0x00007FF66B49203F]\n\t(No symbol) [0x00007FF66B468147]\n\t(No symbol) [0x00007FF66B4AB1EE]\n\t(No symbol) [0x00007FF66B491C63]\n\t(No symbol) [0x00007FF66B46766E]\n\t(No symbol) [0x00007FF66B46683C]\n\t(No symbol) [0x00007FF66B467221]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF66B8496D4+1099860]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B58D8FC+53532]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B580E25+1605]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF66B848665+1095653]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B61C961+27777]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B616CE4+4100]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B616E1B+4411]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B60CFA0+575424]\n\tBaseThreadInitThunk [0x00007FF94B73257D+29]\n\tRtlUserThreadStart [0x00007FF94CD8AF28+40]\n]]", "trace": "self = <pageObjects.add_to_DPNF_2_O.AddToDPNF object at 0x000001F4EBE45F40>, FamilyCode = '001832942000', PhilMemberName = 'ANJAN PAUL'\nMemberFirstName = 'Asish', MemberMiddleName = 'Kumar', MemberLastName = 'Panda'\n\n    def enterFamilyCode(self,FamilyCode,PhilMemberName,MemberFirstName,MemberMiddleName,MemberLastName):\n        try:\n            time.sleep(0.5)\n            flag=False\n            MemberName=\" \".join([MemberFirstName,MemberMiddleName,MemberLastName])\n            WebDriverWait(self.driver,15).until(EC.presence_of_element_located((By.XPATH, self.text_familyCode_Xpath)))\n            self.driver.find_element(By.XPATH,self.text_familyCode_Xpath).clear()\n            if len(FamilyCode)==0:\n                FamilyCode=''\n            self.getCorrectFamilyCode(FamilyCode)\n            #self.driver.find_element(By.XPATH,self.text_familyCode_Xpath).send_keys(FamilyCode)\n            time.sleep(2)\n            if len(FamilyCode)!=0:\n                PhilMemberName_locators=self.driver.find_elements(By.XPATH,self.options_getAllFamilyCode_Xpath)\n                elements_text_value=[]\n                for element in PhilMemberName_locators:\n                    elements_text=str(element.text).lower().strip().split()\n                    print(elements_text)\n                    elements_text_value.append(\" \".join(elements_text[:-1]))\n                print(elements_text_value)\n                print(PhilMemberName_locators)\n                print()\n    \n                element_dict=dict(zip(elements_text_value,PhilMemberName_locators))\n                print(element_dict)\n    \n                for dict_key_text in element_dict.keys():\n                    if dict_key_text == PhilMemberName.lower():\n                        element_dict[dict_key_text].click()\n                        if str(dict_key_text).lower() != str(MemberName).lower():\n>                           self.click_unitil_interactable(self.driver.find_element(By.XPATH,self.popup_fcConfirm_Xpath))\n\nDPWork_2.O_AutomationTesting\\pageObjects\\add_to_DPNF_2_O.py:304: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F4EBD3E940>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...60CFA0+575424]\\\\n\\\\tBaseThreadInitThunk [0x00007FF94B73257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF94CD8AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[contains(text(),\"Yes, Continue\")]\"}\nE         (Session info: MicrosoftEdge=126.0.2592.113); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66B688132+13538]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B611DE9+595465]\nE       \t(No symbol) [0x00007FF66B42E6CF]\nE       \t(No symbol) [0x00007FF66B472960]\nE       \t(No symbol) [0x00007FF66B472A1F]\nE       \t(No symbol) [0x00007FF66B4AD627]\nE       \t(No symbol) [0x00007FF66B49203F]\nE       \t(No symbol) [0x00007FF66B468147]\nE       \t(No symbol) [0x00007FF66B4AB1EE]\nE       \t(No symbol) [0x00007FF66B491C63]\nE       \t(No symbol) [0x00007FF66B46766E]\nE       \t(No symbol) [0x00007FF66B46683C]\nE       \t(No symbol) [0x00007FF66B467221]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF66B8496D4+1099860]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B58D8FC+53532]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B580E25+1605]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF66B848665+1095653]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B61C961+27777]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B616CE4+4100]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B616E1B+4411]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B60CFA0+575424]\nE       \tBaseThreadInitThunk [0x00007FF94B73257D+29]\nE       \tRtlUserThreadStart [0x00007FF94CD8AF28+40]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_dpwork_addToDpnf.Test_002_MasterSearch object at 0x000001F4EBD3E430>\nsetup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"5c3a9714f247c7fd28625a516853e67d\")>\n\n    def test_DpWorkAddToDPNF(self, setup):\n        try:\n            self.logging.info(\"Test Begins\")\n            self.driver=setup\n            self.logging.info(\"Driver Initiated\")\n            self.driver.implicitly_wait(4)\n            self.driver.maximize_window()\n            self.driver.get(self.dpwork_url)\n            self.logging.info(\"Surfing to DpWork login page\")\n            time.sleep(2)\n    \n            dataframe=XLUtils.convert_excelSheetIntoDataFrame(excelFilePath=self.dpnf_testData_FilePath,sheetName=addToDpnfSheetName)\n            addToDpnfTestDataDict,addToDpnffieldValues_length=XLUtils.ReturnDictionaryforselectedColumnsInDataframe(dataframe, ParameterField=parametersFields,FieldValues=fieldValues)\n            self.logging.info(\"Data taken from Test Data file\")\n    \n            self.dplp=DpWorkLoginPage(self.driver)\n            self.dtdpnf=AddToDPNF(self.driver)\n            self.dplp.waitForLoginPage()\n    \n            ss00_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF - Add To DPNF','00',self.driver)\n            docsutil.addMediumHeading(self.document,\"Test Case - 001 - Test DpWork DPNF: Add To DPNF Page for A FW - Happy Path\")\n            docsutil.appendContentWithBlueColor(self.document,\"DP Work DPNF Page - Add To DPNF: Test Case - 001 - Begins:\")\n            docsutil.insertImageInDocx(self.document,ss00_location)\n    \n            self.dplp.setDpWorkUserName(self.field_worker_username)\n            self.logging.info(\"Username Entered- {}\".format(self.field_worker_username))\n            self.dplp.setDpWorkPassword(self.field_worker_password)\n            self.logging.info(\"Corresponding Password Entered\")\n    \n            ss01_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','01',self.driver)\n            docsutil.addSmallHeading(self.document,\"Field Worker Enters User Name and Password\")\n            docsutil.appendContent(self.document,\"DP worker valid username - {}\".format(self.field_worker_username))\n            docsutil.appendContent(self.document,\"DP worker valid password - **************\")\n            docsutil.insertImageInDocx(self.document,ss01_location)\n    \n            self.dplp.clickLoginButton()\n            self.logging.info(\"Click on login button\")\n            self.logging.info(\"Member clicks on login button\")\n            time.sleep(2)\n    \n            ss02_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','02',self.driver)\n            docsutil.addSmallHeading(self.document,\"Field Worker Clicks on Login Button\")\n            docsutil.insertImageInDocx(self.document,ss02_location)\n    \n            for index in range(addToDpnffieldValues_length):\n                self.driver.refresh()\n                self.dtdpnf.clickDPNFFromNavigationPanel()\n                ss03_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','03',self.driver)\n                docsutil.addSmallHeading(self.document,\"Field Worker Clicks DPNF Module from the Navigation Panel on the right\")\n                docsutil.insertImageInDocx(self.document,ss03_location)\n    \n                self.dtdpnf.clickAddtoDPNF()\n                ss03A_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','03A',self.driver)\n                docsutil.addSmallHeading(self.document,\"Field Worker Clicks on Add to DPNF button to add member\")\n                docsutil.insertImageInDocx(self.document,ss03A_location)\n    \n    \n                filenamePrefix=list(addToDpnfTestDataDict[TestCaseName_Dpnf])[index]\n                self.dtdpnf.enterMemberFirstName(MemberFirstName=list(addToDpnfTestDataDict[MemberFirstName_Dpnf])[index])\n                ss04_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','04',self.driver)\n                docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's First Name\")\n                docsutil.insertImageInDocx(self.document,ss04_location)\n    \n                self.dtdpnf.enterMemberMiddleName(MemberMiddleName=list(addToDpnfTestDataDict[MemberMiddleName_Dpnf])[index])\n                ss05_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','05',self.driver)\n                docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Middle Name\")\n                docsutil.insertImageInDocx(self.document,ss05_location)\n    \n                self.dtdpnf.enterMemberLastName(MemberLastName=list(addToDpnfTestDataDict[MemberLastName_Dpnf])[index])\n                ss06_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','06',self.driver)\n                docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Last Name\")\n                docsutil.insertImageInDocx(self.document,ss06_location)\n    \n                if str(list(addToDpnfTestDataDict[alreadyDpnfed_dpnf])[index]).lower()=='no':\n>                   self.dtdpnf.enterFamilyCode(FamilyCode=list(addToDpnfTestDataDict[FamilyCode_Dpnf])[index],\\\n                                                PhilMemberName=list(addToDpnfTestDataDict[PhilMemberName_Dpnf])[index],\\\n                                                MemberFirstName=list(addToDpnfTestDataDict[MemberFirstName_Dpnf])[index],\\\n                                                MemberMiddleName=list(addToDpnfTestDataDict[MemberMiddleName_Dpnf])[index],\\\n                                                MemberLastName=list(addToDpnfTestDataDict[MemberLastName_Dpnf])[index])\n\nDPWork_2.O_AutomationTesting\\testcases\\test_dpwork_addToDpnf.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageObjects.add_to_DPNF_2_O.AddToDPNF object at 0x000001F4EBE45F40>, FamilyCode = '001832942000', PhilMemberName = 'ANJAN PAUL'\nMemberFirstName = 'Asish', MemberMiddleName = 'Kumar', MemberLastName = 'Panda'\n\n    def enterFamilyCode(self,FamilyCode,PhilMemberName,MemberFirstName,MemberMiddleName,MemberLastName):\n        try:\n            time.sleep(0.5)\n            flag=False\n            MemberName=\" \".join([MemberFirstName,MemberMiddleName,MemberLastName])\n            WebDriverWait(self.driver,15).until(EC.presence_of_element_located((By.XPATH, self.text_familyCode_Xpath)))\n            self.driver.find_element(By.XPATH,self.text_familyCode_Xpath).clear()\n            if len(FamilyCode)==0:\n                FamilyCode=''\n            self.getCorrectFamilyCode(FamilyCode)\n            #self.driver.find_element(By.XPATH,self.text_familyCode_Xpath).send_keys(FamilyCode)\n            time.sleep(2)\n            if len(FamilyCode)!=0:\n                PhilMemberName_locators=self.driver.find_elements(By.XPATH,self.options_getAllFamilyCode_Xpath)\n                elements_text_value=[]\n                for element in PhilMemberName_locators:\n                    elements_text=str(element.text).lower().strip().split()\n                    print(elements_text)\n                    elements_text_value.append(\" \".join(elements_text[:-1]))\n                print(elements_text_value)\n                print(PhilMemberName_locators)\n                print()\n    \n                element_dict=dict(zip(elements_text_value,PhilMemberName_locators))\n                print(element_dict)\n    \n                for dict_key_text in element_dict.keys():\n                    if dict_key_text == PhilMemberName.lower():\n                        element_dict[dict_key_text].click()\n                        if str(dict_key_text).lower() != str(MemberName).lower():\n                            self.click_unitil_interactable(self.driver.find_element(By.XPATH,self.popup_fcConfirm_Xpath))\n                        flag=True\n                        break\n                    else:\n                        flag=False\n                if not flag:\n                    assert False, \"Not able to fetch Phil Member on entering FC Code\"\n    \n        except Exception as e:\n>           raise CustomException(e,sys)\nE           exception.CustomException: Error occured in python script name [F:\\DP_WORK_2.O\\DPWork_2.O\\DPWork_2.O_AutomationTesting\\pageObjects\\add_to_DPNF_2_O.py] line number [304] error message[Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[contains(text(),\"Yes, Continue\")]\"}\nE             (Session info: MicrosoftEdge=126.0.2592.113); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF66B688132+13538]\nE           \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B611DE9+595465]\nE           \t(No symbol) [0x00007FF66B42E6CF]\nE           \t(No symbol) [0x00007FF66B472960]\nE           \t(No symbol) [0x00007FF66B472A1F]\nE           \t(No symbol) [0x00007FF66B4AD627]\nE           \t(No symbol) [0x00007FF66B49203F]\nE           \t(No symbol) [0x00007FF66B468147]\nE           \t(No symbol) [0x00007FF66B4AB1EE]\nE           \t(No symbol) [0x00007FF66B491C63]\nE           \t(No symbol) [0x00007FF66B46766E]\nE           \t(No symbol) [0x00007FF66B46683C]\nE           \t(No symbol) [0x00007FF66B467221]\nE           \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF66B8496D4+1099860]\nE           \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B58D8FC+53532]\nE           \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B580E25+1605]\nE           \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF66B848665+1095653]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B61C961+27777]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B616CE4+4100]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B616E1B+4411]\nE           \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B60CFA0+575424]\nE           \tBaseThreadInitThunk [0x00007FF94B73257D+29]\nE           \tRtlUserThreadStart [0x00007FF94CD8AF28+40]\nE           ]\n\nDPWork_2.O_AutomationTesting\\pageObjects\\add_to_DPNF_2_O.py:313: CustomException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_dpwork_addToDpnf.Test_002_MasterSearch object at 0x000001F4EBD3E430>\nsetup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"5c3a9714f247c7fd28625a516853e67d\")>\n\n    def test_DpWorkAddToDPNF(self, setup):\n        try:\n            self.logging.info(\"Test Begins\")\n            self.driver=setup\n            self.logging.info(\"Driver Initiated\")\n            self.driver.implicitly_wait(4)\n            self.driver.maximize_window()\n            self.driver.get(self.dpwork_url)\n            self.logging.info(\"Surfing to DpWork login page\")\n            time.sleep(2)\n    \n            dataframe=XLUtils.convert_excelSheetIntoDataFrame(excelFilePath=self.dpnf_testData_FilePath,sheetName=addToDpnfSheetName)\n            addToDpnfTestDataDict,addToDpnffieldValues_length=XLUtils.ReturnDictionaryforselectedColumnsInDataframe(dataframe, ParameterField=parametersFields,FieldValues=fieldValues)\n            self.logging.info(\"Data taken from Test Data file\")\n    \n            self.dplp=DpWorkLoginPage(self.driver)\n            self.dtdpnf=AddToDPNF(self.driver)\n            self.dplp.waitForLoginPage()\n    \n            ss00_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF - Add To DPNF','00',self.driver)\n            docsutil.addMediumHeading(self.document,\"Test Case - 001 - Test DpWork DPNF: Add To DPNF Page for A FW - Happy Path\")\n            docsutil.appendContentWithBlueColor(self.document,\"DP Work DPNF Page - Add To DPNF: Test Case - 001 - Begins:\")\n            docsutil.insertImageInDocx(self.document,ss00_location)\n    \n            self.dplp.setDpWorkUserName(self.field_worker_username)\n            self.logging.info(\"Username Entered- {}\".format(self.field_worker_username))\n            self.dplp.setDpWorkPassword(self.field_worker_password)\n            self.logging.info(\"Corresponding Password Entered\")\n    \n            ss01_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','01',self.driver)\n            docsutil.addSmallHeading(self.document,\"Field Worker Enters User Name and Password\")\n            docsutil.appendContent(self.document,\"DP worker valid username - {}\".format(self.field_worker_username))\n            docsutil.appendContent(self.document,\"DP worker valid password - **************\")\n            docsutil.insertImageInDocx(self.document,ss01_location)\n    \n            self.dplp.clickLoginButton()\n            self.logging.info(\"Click on login button\")\n            self.logging.info(\"Member clicks on login button\")\n            time.sleep(2)\n    \n            ss02_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','02',self.driver)\n            docsutil.addSmallHeading(self.document,\"Field Worker Clicks on Login Button\")\n            docsutil.insertImageInDocx(self.document,ss02_location)\n    \n            for index in range(addToDpnffieldValues_length):\n                self.driver.refresh()\n                self.dtdpnf.clickDPNFFromNavigationPanel()\n                ss03_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','03',self.driver)\n                docsutil.addSmallHeading(self.document,\"Field Worker Clicks DPNF Module from the Navigation Panel on the right\")\n                docsutil.insertImageInDocx(self.document,ss03_location)\n    \n                self.dtdpnf.clickAddtoDPNF()\n                ss03A_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','03A',self.driver)\n                docsutil.addSmallHeading(self.document,\"Field Worker Clicks on Add to DPNF button to add member\")\n                docsutil.insertImageInDocx(self.document,ss03A_location)\n    \n    \n                filenamePrefix=list(addToDpnfTestDataDict[TestCaseName_Dpnf])[index]\n                self.dtdpnf.enterMemberFirstName(MemberFirstName=list(addToDpnfTestDataDict[MemberFirstName_Dpnf])[index])\n                ss04_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','04',self.driver)\n                docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's First Name\")\n                docsutil.insertImageInDocx(self.document,ss04_location)\n    \n                self.dtdpnf.enterMemberMiddleName(MemberMiddleName=list(addToDpnfTestDataDict[MemberMiddleName_Dpnf])[index])\n                ss05_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','05',self.driver)\n                docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Middle Name\")\n                docsutil.insertImageInDocx(self.document,ss05_location)\n    \n                self.dtdpnf.enterMemberLastName(MemberLastName=list(addToDpnfTestDataDict[MemberLastName_Dpnf])[index])\n                ss06_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','06',self.driver)\n                docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Last Name\")\n                docsutil.insertImageInDocx(self.document,ss06_location)\n    \n                if str(list(addToDpnfTestDataDict[alreadyDpnfed_dpnf])[index]).lower()=='no':\n                    self.dtdpnf.enterFamilyCode(FamilyCode=list(addToDpnfTestDataDict[FamilyCode_Dpnf])[index],\\\n                                                PhilMemberName=list(addToDpnfTestDataDict[PhilMemberName_Dpnf])[index],\\\n                                                MemberFirstName=list(addToDpnfTestDataDict[MemberFirstName_Dpnf])[index],\\\n                                                MemberMiddleName=list(addToDpnfTestDataDict[MemberMiddleName_Dpnf])[index],\\\n                                                MemberLastName=list(addToDpnfTestDataDict[MemberLastName_Dpnf])[index])\n                    time.sleep(12)\n                    ss10_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','10',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Family Code if any and maps with Philantropy Member Name\")\n                    docsutil.insertImageInDocx(self.document,ss10_location)\n    \n                    self.dtdpnf.enterGuardianFirstName(GuardianFirstName=list(addToDpnfTestDataDict[GuardianFirstName_Dpnf])[index])\n                    ss07_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','07',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Guardian's First Name\")\n                    docsutil.insertImageInDocx(self.document,ss07_location)\n    \n                    self.dtdpnf.enterGuardianMiddleName(GuardianMiddleName=list(addToDpnfTestDataDict[GuardianMiddleName_Dpnf])[index])\n                    ss08_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','08',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Guardian's Middle Name\")\n                    docsutil.insertImageInDocx(self.document,ss08_location)\n    \n                    self.dtdpnf.enterGuardianLastName(GuardianLastName=list(addToDpnfTestDataDict[GuardianLastName_Dpnf])[index])\n                    ss09_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','09',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Guardian's Last Name\")\n                    docsutil.insertImageInDocx(self.document,ss09_location)\n    \n                    genderType_value=self.dtdpnf.enterGender(genderType=list(addToDpnfTestDataDict[GenderType_Dpnf])[index])\n                    ss11_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','11',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Gender\")\n                    docsutil.insertImageInDocx(self.document,ss11_location)\n    \n                    self.dtdpnf.enterMaritalStatus(maritalStatus=list(addToDpnfTestDataDict[MaritalStatus_Dpnf])[index],\\\n                                                genderType=genderType_value,\\\n                                                    husbandFirstName=list(addToDpnfTestDataDict[HusbandFirstName_Dpnf])[index],\\\n                                                    husbandMiddleName=list(addToDpnfTestDataDict[HusbandMiddleName_Dpnf])[index],\\\n                                                    husbandLastName=list(addToDpnfTestDataDict[HusbandLastName_Dpnf])[index])\n                    ss12_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','12',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Marital Status and Husband details if any\")\n                    docsutil.insertImageInDocx(self.document,ss12_location)\n    \n                    self.dtdpnf.enterContactNumber(contactNumber=list(addToDpnfTestDataDict[ContactNumber_Dpnf])[index])\n                    ss13_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','13',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Contact Number\")\n                    docsutil.insertImageInDocx(self.document,ss13_location)\n    \n                    self.dtdpnf.clickNextButtonDPNF()\n                    ss14_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','14',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Personal Information and click on Next Button\")\n                    docsutil.insertImageInDocx(self.document,ss14_location)\n    \n                    self.dtdpnf.enterDikhaAddress(dikshaAddress=list(addToDpnfTestDataDict[DikshaAddress_Dpnf])[index])\n                    ss15_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','15',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Diksha Address\")\n                    docsutil.insertImageInDocx(self.document,ss15_location)\n    \n                    self.dtdpnf.enterDikshaLandmark(dikshaLandmark=list(addToDpnfTestDataDict[DikshaLandmark_Dpnf])[index])\n                    ss16_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','16',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Diksha Landmark\")\n                    docsutil.insertImageInDocx(self.document,ss16_location)\n    \n                    self.dtdpnf.enterDikshaPincode(dikshaPincode=list(addToDpnfTestDataDict[DikshaPincode_Dpnf])[index])\n                    ss17_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','17',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Diksha Pncode\")\n                    docsutil.insertImageInDocx(self.document,ss07_location)\n    \n                    self.dtdpnf.enterPresentAddress(presentAddress=list(addToDpnfTestDataDict[PresentAddress_Dpnf])[index])\n                    ss18_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','18',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Present Address\")\n                    docsutil.insertImageInDocx(self.document,ss18_location)\n    \n                    self.dtdpnf.enterPresentLandmark(presentLandmark=list(addToDpnfTestDataDict[PresentLandmark_Dpnf])[index])\n                    ss19_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','19',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Present Landmark\")\n                    docsutil.insertImageInDocx(self.document,ss19_location)\n    \n                    self.dtdpnf.enterPresentPincode(presentPincode=list(addToDpnfTestDataDict[PresentPincode_Dpnf])[index])\n                    ss20_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','20',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Present Pincode\")\n                    docsutil.insertImageInDocx(self.document,ss20_location)\n    \n                    self.dtdpnf.enterPresentPostOffice(presentPostOffice=list(addToDpnfTestDataDict[PresentPostOffice_Dpnf])[index])\n                    ss21_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','21',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Present Post Office\")\n                    docsutil.insertImageInDocx(self.document,ss21_location)\n    \n                    self.dtdpnf.clickCheckboxAndEnterPermanentAddress(checkboxStatus=list(addToDpnfTestDataDict[checkboxStatus_Dpnf])[index],\\\n                                                                    permanentAddress=list(addToDpnfTestDataDict[PermanentAddress_Dpnf])[index],\\\n                                                                    PermanentLandmark=list(addToDpnfTestDataDict[PermanentLandmark_Dpnf])[index],\\\n                                                                    PermanentPincode=list(addToDpnfTestDataDict[PermanentPincode_Dpnf])[index],\\\n                                                                    PermanentPO=list(addToDpnfTestDataDict[PermanentPostOffice_Dpnf])[index])\n                    ss22_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','22',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Permanent Address Details\")\n                    docsutil.insertImageInDocx(self.document,ss22_location)\n    \n                    self.dtdpnf.clickNextButtonDPNF()\n                    ss23_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','23',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's clicks on Next Button to move to Date and Summary Info\")\n                    docsutil.insertImageInDocx(self.document,ss23_location)\n    \n                    self.dtdpnf.enterDateOfBirth(birthYear=list(addToDpnfTestDataDict[birthYear_Dpnf])[index],\n                                                birthMonth=list(addToDpnfTestDataDict[birthMonth_Dpnf])[index],\n                                                birthDate=list(addToDpnfTestDataDict[birthDate_Dpnf])[index])\n                    ss24_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','24',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Date of Birth\")\n                    docsutil.insertImageInDocx(self.document,ss24_location)\n    \n                    self.dtdpnf.enterDikshaYear(dikshaYear=list(addToDpnfTestDataDict[dikshaYear_Dpnf])[index],\n                                                dikshaMonth=list(addToDpnfTestDataDict[dikshaMonth_Dpnf])[index],\n                                                dikhaDay=list(addToDpnfTestDataDict[dikhaDay_Dpnf])[index])\n                    ss25_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','25',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Diksha Date\")\n                    docsutil.insertImageInDocx(self.document,ss25_location)\n    \n                    self.dtdpnf.enterDpnfComment(comment=list(addToDpnfTestDataDict[comment_Dpnf])[index])\n                    ss26_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','26',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's DPNF Comment\")\n                    docsutil.insertImageInDocx(self.document,ss26_location)\n    \n                    self.dtdpnf.navigateToPersonalInfoPage()\n                    ss27_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','27',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker clicks Personal Info Title to navigate to that page\")\n                    docsutil.insertImageInDocx(self.document,ss27_location)\n    \n                    self.dtdpnf.navigateToAddressInfoPage()\n                    ss28_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','28',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker clicks Address Info Title to navigate to that page\")\n                    docsutil.insertImageInDocx(self.document,ss28_location)\n    \n                    #self.dtdpnf.navigateToDateAndSummarypage()\n                    self.dtdpnf.clickNextButtonDPNF()\n                    ss29_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','29',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker clicks Date and Summary Page to navigate to that page\")\n                    docsutil.insertImageInDocx(self.document,ss29_location)\n    \n                    memberAlreadyUpdated=list(addToDpnfTestDataDict[memberAlreadyUpdatedStatus_dpnf])[index]\n                    submitStatus=self.dtdpnf.clickSubmitAddToDPNF(memberAlreadyUpdated)\n                    if submitStatus==\"False\":\n                        ss30_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','30',self.driver)\n                        docsutil.addSmallHeading(self.document,\"Field Worker clicks on Add to DPNF submit button\")\n                        docsutil.insertImageInDocx(self.document,ss30_location)\n                        docsutil.appendContentWithFailColor(self.document,\"Test Case - 001 - Test DpWork DPNF Page  - Add To DPNF \")\n                        docsutil.saveDocument(self.document,str(self.addToDpnf_documentation_fileName)+\"-TC-\"+str(filenamePrefix))\n                        assert False\n    \n                    elif submitStatus==\"alreadyUpdated\":\n                        ss30_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','30',self.driver)\n                        docsutil.addSmallHeading(self.document,\"Field Worker clicks on Add to DPNF submit button\")\n                        docsutil.insertImageInDocx(self.document,ss30_location)\n                        docsutil.appendContentWithPassColor(self.document,\"Test Case - 001 - Test DpWork DPNF Page  - Add To DPNF \")\n                        docsutil.saveDocument(self.document,str(self.addToDpnf_documentation_fileName)+\"-TC-\"+str(filenamePrefix))\n                        assert True\n    \n                    else:\n                        self.dtdpnf.clickDoneSuccessButton()\n                        ss31_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','31',self.driver)\n                        docsutil.addSmallHeading(self.document,\"Field Worker clicks on Done success button\")\n                        docsutil.insertImageInDocx(self.document,ss31_location)\n    \n    \n                        self.logging.info(\"Successfully Validated Test Case - 001 - Test DpWork DPNF Page  - Add To DPNF - Pass\")\n                        time.sleep(2)\n                        #self.dpms.validateExtractKeywordSearchData(self,keywordSearchExtractDataFrame,keywordSearchDataExtractFilePath,testdatakeywordSearchExcelFilePath,testdatakeywordSearchExcelSheetName)\n    \n                        docsutil.appendContentWithPassColor(self.document,\"Successfully Validated Test Case - 001 - Test DpWork DPNF Page  - Add To DPNF \")\n                        docsutil.saveDocument(self.document,\"TC-\"+str(filenamePrefix)+\"-\"+str(self.addToDpnf_documentation_fileName))\n                        assert True\n    \n                if str(list(addToDpnfTestDataDict[alreadyDpnfed_dpnf])[index]).lower()=='yes':\n                    print(list(addToDpnfTestDataDict[FamilyCode_Dpnf])[index])\n                    self.dtdpnf.enterFamilyCodeForAlreadyDpnfed(FamilyCode=list(addToDpnfTestDataDict[FamilyCode_Dpnf])[index],\\\n                                                            PhilMemberName=list(addToDpnfTestDataDict[PhilMemberName_Dpnf])[index])\n                    time.sleep(12)\n                    ss10_location=docsutil.takeAndSaveScreenshotUnique(self.screenshot_location,'DP Work DPNF Page - Add To DPNF','10',self.driver)\n                    docsutil.addSmallHeading(self.document,\"Field Worker enters DPNF Member's Family Code if any and maps with Philantropy Member Name\")\n                    docsutil.insertImageInDocx(self.document,ss10_location)\n    \n                    self.logging.info(\"Successfully Validated Test Case - 001 - Test DpWork DPNF Page  - Add To DPNF - Pass\")\n                    time.sleep(2)\n                    #self.dpms.validateExtractKeywordSearchData(self,keywordSearchExtractDataFrame,keywordSearchDataExtractFilePath,testdatakeywordSearchExcelFilePath,testdatakeywordSearchExcelSheetName)\n    \n                    docsutil.appendContentWithPassColor(self.document,\"Successfully Validated Test Case - 001 - Test DpWork DPNF Page  - Add To DPNF \")\n                    docsutil.saveDocument(self.document,\"TC-\"+str(filenamePrefix)+\"-\"+str(self.addToDpnf_documentation_fileName))\n                    assert True\n    \n            self.driver.close()\n        except Exception as e:\n            docsutil.appendContentWithFailColor(self.document,\"Test Case - 001 - Test DpWork DPNF Page  - Add To DPNF \")\n>           raise CustomException(e,sys)\nE           exception.CustomException: Error occured in python script name [F:\\DP_WORK_2.O\\DPWork_2.O\\DPWork_2.O_AutomationTesting\\testcases\\test_dpwork_addToDpnf.py] line number [135] error message[Error occured in python script name [F:\\DP_WORK_2.O\\DPWork_2.O\\DPWork_2.O_AutomationTesting\\pageObjects\\add_to_DPNF_2_O.py] line number [304] error message[Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[contains(text(),\"Yes, Continue\")]\"}\nE             (Session info: MicrosoftEdge=126.0.2592.113); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF66B688132+13538]\nE           \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B611DE9+595465]\nE           \t(No symbol) [0x00007FF66B42E6CF]\nE           \t(No symbol) [0x00007FF66B472960]\nE           \t(No symbol) [0x00007FF66B472A1F]\nE           \t(No symbol) [0x00007FF66B4AD627]\nE           \t(No symbol) [0x00007FF66B49203F]\nE           \t(No symbol) [0x00007FF66B468147]\nE           \t(No symbol) [0x00007FF66B4AB1EE]\nE           \t(No symbol) [0x00007FF66B491C63]\nE           \t(No symbol) [0x00007FF66B46766E]\nE           \t(No symbol) [0x00007FF66B46683C]\nE           \t(No symbol) [0x00007FF66B467221]\nE           \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF66B8496D4+1099860]\nE           \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B58D8FC+53532]\nE           \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B580E25+1605]\nE           \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF66B848665+1095653]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B61C961+27777]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B616CE4+4100]\nE           \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF66B616E1B+4411]\nE           \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF66B60CFA0+575424]\nE           \tBaseThreadInitThunk [0x00007FF94B73257D+29]\nE           \tRtlUserThreadStart [0x00007FF94CD8AF28+40]\nE           ]]\n\nDPWork_2.O_AutomationTesting\\testcases\\test_dpwork_addToDpnf.py:321: CustomException"}, "attachments": [{"name": "log", "source": "5a4f2ef1-a8cd-44df-9689-bc2d5f407e03-attachment.txt", "type": "text/plain"}], "start": 1721647336984, "stop": 1721647432498, "uuid": "7b7be619-c7d0-4885-af2e-31834e2c9ccb", "historyId": "b952987041a93d61596af727355c6cb3", "testCaseId": "b952987041a93d61596af727355c6cb3", "fullName": "DPWork_2.O_AutomationTesting.testcases.test_dpwork_addToDpnf.Test_002_MasterSearch#test_DpWorkAddToDPNF", "labels": [{"name": "parentSuite", "value": "DPWork_2.O_AutomationTesting.testcases"}, {"name": "suite", "value": "test_dpwork_addToDpnf"}, {"name": "subSuite", "value": "Test_002_MasterSearch"}, {"name": "host", "value": "LAPTOP-N3NN0N9R"}, {"name": "thread", "value": "22616-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "DPWork_2.O_AutomationTesting.testcases.test_dpwork_addToDpnf"}]}